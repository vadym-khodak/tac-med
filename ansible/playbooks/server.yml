---
- name: Deploy tac-med server
  hosts: all
  become: yes
  
  tasks:
    - name: Create application directory
      file:
        path: "{{ app_dir }}"
        state: directory
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: '0755'
    
    - name: Create server directory
      file:
        path: "{{ app_dir }}/server"
        state: directory
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: '0755'
    
    - name: Create logs directory
      file:
        path: "{{ app_dir }}/logs"
        state: directory
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: '0755'
    
    - name: Copy server files
      synchronize:
        src: "{{ playbook_dir }}/../../apps/server/"
        dest: "{{ app_dir }}/server/"
        delete: yes
        rsync_opts:
          - "--exclude=node_modules"
          - "--exclude=dist"
          - "--exclude=.env"
      become_user: "{{ ansible_user }}"
    
    - name: Copy package.json files
      copy:
        src: "{{ item.src }}"
        dest: "{{ item.dest }}"
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
      with_items:
        - { src: "{{ playbook_dir }}/../../package.json", dest: "{{ app_dir }}/package.json" }
        - { src: "{{ playbook_dir }}/../../package-lock.json", dest: "{{ app_dir }}/package-lock.json" }
        - { src: "{{ playbook_dir }}/../../nx.json", dest: "{{ app_dir }}/nx.json" }
        - { src: "{{ playbook_dir }}/../../tsconfig.base.json", dest: "{{ app_dir }}/tsconfig.base.json" }
    
    - name: Copy shared libraries
      synchronize:
        src: "{{ playbook_dir }}/../../libs/"
        dest: "{{ app_dir }}/libs/"
        delete: yes
        rsync_opts:
          - "--exclude=node_modules"
      become_user: "{{ ansible_user }}"
    
    - name: Create server environment file
      template:
        src: ../templates/server.env.j2
        dest: "{{ app_dir }}/server/.env"
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: '0600'
    
    - name: Install dependencies
      npm:
        path: "{{ app_dir }}"
        state: present
      become_user: "{{ ansible_user }}"
      environment:
        NODE_ENV: "{{ node_env }}"
    
    - name: Build server
      shell: |
        cd {{ app_dir }}
        npm run build:server
      become_user: "{{ ansible_user }}"
      environment:
        NODE_ENV: "{{ node_env }}"
    
    - name: Create PM2 ecosystem config
      template:
        src: ../templates/pm2.ecosystem.config.js.j2
        dest: "{{ app_dir }}/ecosystem.config.js"
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
    
    - name: Start server with PM2
      shell: |
        cd {{ app_dir }}
        pm2 delete tac-med-server || true
        pm2 start ecosystem.config.js --only tac-med-server
        pm2 save
      become_user: "{{ ansible_user }}"
      environment:
        PM2_HOME: "/home/{{ ansible_user }}/.pm2"
    
    - name: Setup PM2 startup script
      shell: |
        pm2 startup systemd -u {{ ansible_user }} --hp /home/{{ ansible_user }}
        systemctl enable pm2-{{ ansible_user }}
      
    - name: Wait for server to be ready
      wait_for:
        port: "{{ server_port }}"
        host: 127.0.0.1
        delay: 5
        timeout: 30
    
    - name: Check server health
      uri:
        url: "http://127.0.0.1:{{ server_port }}/health"
        method: GET
        status_code: 200
      register: health_check
      retries: 3
      delay: 5